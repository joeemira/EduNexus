/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package login.application;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;

/**
 *
 * @author Moazw
 */
public class Gpa_Sheet_Term_Instructor extends javax.swing.JFrame {
  static private  int  totalCreditHours ;
  

    /**
     * Creates new form Gpa_Sheet_Term_Instructor
     */
    public Gpa_Sheet_Term_Instructor() {
        initComponents();
        loadStudentsAndCoursesFromDatabase();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jTextField3 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton4.setText("jButton4");

        jButton5.setText("jButton5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("COURSES GRADES( INSTRUCTOR )");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Subject");

        jLabel2.setFont(new java.awt.Font("Berlin Sans FB", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 102));
        jLabel2.setText("Student");

        jLabel3.setFont(new java.awt.Font("Berlin Sans FB", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 102));
        jLabel3.setText("Grade");

        jComboBox1.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(0, 102, 102));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--- Choose Student ---" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jComboBox2.setForeground(new java.awt.Color(0, 102, 102));
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--- Choose Subject ---" }));
        jComboBox2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jComboBox3.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jComboBox3.setForeground(new java.awt.Color(0, 102, 102));
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--- Choose Garde ---", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "F" }));

        jButton1.setBackground(new java.awt.Color(0, 102, 102));
        jButton1.setFont(new java.awt.Font("Berlin Sans FB", 0, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Remove Subject");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 102, 102));
        jButton2.setFont(new java.awt.Font("Berlin Sans FB", 0, 24)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Add Subject");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Mikhak Medium", 0, 14)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 102, 102));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "                                                 Subject", "                   Grade", "                      Hours"
            }
        ));
        jTable1.setFocusable(false);
        jTable1.setGridColor(new java.awt.Color(0, 102, 102));
        jTable1.setSelectionBackground(new java.awt.Color(0, 0, 204));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(250);
        }

        jButton3.setBackground(new java.awt.Color(0, 102, 102));
        jButton3.setFont(new java.awt.Font("Berlin Sans FB", 0, 24)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Calculate GPA");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Berlin Sans FB", 0, 22)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 0, 0));
        jLabel4.setText("Total Gpa");

        jLabel5.setFont(new java.awt.Font("Berlin Sans FB", 0, 22)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 0, 0));
        jLabel5.setText("Equivalent Percentage");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("--- Your Gpa ---");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText(" --- % ---");

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
        });
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jRadioButton1.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 0, 24)); // NOI18N
        jRadioButton1.setForeground(new java.awt.Color(0, 102, 102));
        jRadioButton1.setText("Cumulative GPA :");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 24)); // NOI18N
        jRadioButton2.setForeground(new java.awt.Color(0, 102, 102));
        jRadioButton2.setText("Term GPA");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jTextField3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField3FocusGained(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 102, 102));
        jButton6.setFont(new java.awt.Font("Berlin Sans FB", 0, 32)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Save");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setText("Total Previous Gpa ");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel9.setText("Total previous hours");

        jButton7.setBackground(new java.awt.Color(0, 102, 102));
        jButton7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("<< Back");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addGap(26, 611, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jButton3)
                                        .addGap(121, 121, 121)
                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(120, 120, 120))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel(); 

    String sub = (String) jComboBox2.getSelectedItem();
        if (!"--- Choose Subject ---".equals(jComboBox2.getSelectedItem()) && Check_Existance() && !"--- Choose Garde ---".equals(jComboBox3.getSelectedItem())) {
        model.addRow(new Object[]{jComboBox2.getSelectedItem(), jComboBox3.getSelectedItem(), Hours(sub)});
        jComboBox3.setSelectedIndex(0);
        jComboBox2.setSelectedIndex(0);
    } else if (!Check_Existance()) {
        JOptionPane.showMessageDialog(this, "Something is wrong!\n"  
                                          +" Make sure the chosen Subject isn't exist in the table ");    
        jComboBox3.setSelectedIndex(0); 
        jComboBox2.setSelectedIndex(0);
    } else {
        JOptionPane.showMessageDialog(this, "Something is wrong!\n"
                                          + " Choose a Subject & Grade & Hours ");
    }
      
    }//GEN-LAST:event_jButton2ActionPerformed

    private boolean Check_Existance(){
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel(); 
           for(int i = 0 ; i< jTable1.getRowCount() ; i++){
           if( jTable1.getValueAt(i, 0) == jComboBox2.getSelectedItem() ){
           return false ;
           }
       }
           return true;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
assignGradeToDatabase();
    }//GEN-LAST:event_jButton1ActionPerformed
    private double calculate_Cumulative_GPA(){
     if( !"0.0".equals(jTextField1.getText())  && !"0.0".equals(jTextField3.getText()) ){
     double previousGPA = Double.parseDouble(jTextField1.getText());
     int previousTotalCreditHours = Integer.parseInt(jTextField3.getText());
     double newTermGPA = calculateGPA();
     int newTermCreditHours = 0 ;
     for (int i = 0; i < jTable1.getRowCount(); i++) {
            int hours = Integer.parseInt((String) jTable1.getValueAt(i, 2));
            newTermCreditHours += hours;
        }
     double previousTotalQualityPoints = previousGPA * previousTotalCreditHours;
     double newTermQualityPoints = newTermGPA * newTermCreditHours;

          totalCreditHours = previousTotalCreditHours + newTermCreditHours;
        double totalQualityPoints = previousTotalQualityPoints + newTermQualityPoints;
        double cumulativeGPA = totalQualityPoints / totalCreditHours;
        
        return cumulativeGPA ;
     }else{ return calculateGPA();}
     
     }
    

    private double calculateGPA() {
         DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        double totalGradePoints = 0;
        double totalHours = 0;

        for (int i = 0; i < jTable1.getRowCount(); i++) {
            String grade = (String) jTable1.getValueAt(i, 1);
            double hours = Double.parseDouble((String) jTable1.getValueAt(i, 2));
            totalGradePoints += getGradePoints(grade) * hours;
            totalHours += hours;
        }
        totalCreditHours = (int) totalHours;
        double gpa = totalGradePoints / totalHours;
           return gpa ;
      
    }

    private double getGradePoints(String grade) {
        switch (grade) {
            case "A":
                return 4.0;
            case "A-":
                return 3.7;
            case "B+":
                return 3.3;
            case "B":
                return 3.0;
            case "B-":
                return 2.7;
            case "C+":
                return 2.3;
            case "C":
                return 2.0;
            case "C-":
                return 1.7;
            case "D+":
                return 1.3;
            case "D":
                return 1.0;
            case "F":
                return 0.0;
            default:
                return 0.0;
        }
    }
    private String getGradePercentage(double gpa) {
       if(gpa == 4){ return" >95%" ;}
       if((gpa >= 3.7) && (gpa < 4.0)){ return" 90% : <95% " ;}
       if((gpa >= 3.3) && (gpa < 3.7)){ return" 86% : <90% " ;}
       if((gpa >= 3) && (gpa < 3.3))  { return" 82% : <86% " ;}
       if((gpa >= 2.7) && (gpa < 3))  { return" 78% : <82% " ;}
       if((gpa >= 2.3) && (gpa < 2.7)){ return" 75% : <78% " ;}
       if((gpa >= 2.0) && (gpa < 2.3)){ return" 70% : <75% " ;}
       if((gpa >= 1.7) && (gpa < 2.0)){ return" 67% : <70% " ;}
       if((gpa >= 1.3) && (gpa < 1.7)){ return" 63% : <67% " ;}
       if((gpa >= 1.0) && (gpa < 1.3)){ return" 60% : <63% " ;}
       if(gpa <1.0){ return" <60%" ;}
       return "--- % ---";
    }
  
   
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
     if(jComboBox1.getSelectedItem() != "--- Choose Student ---"){
         if(jRadioButton1.isSelected() == true){
            if(jTable1.getRowCount()>=1){
            jLabel7.setText(String.format("%.3f", calculate_Cumulative_GPA() ));
            jLabel8.setText(getGradePercentage(calculate_Cumulative_GPA())); 
            }else{
              JOptionPane.showMessageDialog(this, "Choose a Subjects & Grades & Hours ");
            }
         }else if (jRadioButton2.isSelected() == true){
             if(jTable1.getRowCount()>=1){
                jLabel7.setText(String.format("%.3f", calculateGPA() ));
                jLabel8.setText(getGradePercentage(calculateGPA()));
             }else{
              JOptionPane.showMessageDialog(this, "Choose a Subjects & Grades & Hours ");
            }
        }else{
                JOptionPane.showMessageDialog(this, "Please Select Type of Gpa Calculating ");
              }
        
     }else {
      JOptionPane.showMessageDialog(this, "Please Select Student Name ");
     }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        jTextField1.setEnabled(true);
        jTextField3.setEnabled(true);
        jRadioButton2.setSelected(false);

    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
         jRadioButton1.setSelected(false);
         jTextField1.setEnabled(false);
         jTextField3.setEnabled(false);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
      
        
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusGained

    }//GEN-LAST:event_jTextField1FocusGained

    private void jTextField3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField3FocusGained

    }//GEN-LAST:event_jTextField3FocusGained
     
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
    System.out.print("" + totalCreditHours);
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

    try {
        // Save grades for each row in the table
        for (int i = 0; i < model.getRowCount(); i++) {
            String subject = (String) model.getValueAt(i, 0);
            String grade = (String) model.getValueAt(i, 1);

            String studentName = (String) jComboBox1.getSelectedItem();
            if (studentName == null || studentName.equals("--- Choose Student ---")) {
                JOptionPane.showMessageDialog(this, "Please select a student first.");
                return;
            }

            try (Connection conn = DBConnection.connect()) {
                // Get student_id and course_id
                int studentId = -1, courseId = -1;

                PreparedStatement getStudentId = conn.prepareStatement("SELECT id FROM users WHERE username = ?");
                getStudentId.setString(1, studentName);
                ResultSet rs1 = getStudentId.executeQuery();
                if (rs1.next()) studentId = rs1.getInt("id");

                PreparedStatement getCourseId = conn.prepareStatement("SELECT id FROM courses WHERE name = ?");
                getCourseId.setString(1, subject);
                ResultSet rs2 = getCourseId.executeQuery();
                if (rs2.next()) courseId = rs2.getInt("id");

                if (studentId == -1 || courseId == -1) continue;

                double gpa = getGradePoints(grade);

                // Insert or update the grade
                 String sql = "INSERT INTO grades (student_id, course_id, gpa, term) VALUES (?, ?, ?, 'Fall 2025') " +
             "ON CONFLICT (student_id, course_id, term) DO UPDATE SET gpa = EXCLUDED.gpa";



                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setInt(1, studentId);
                stmt.setInt(2, courseId);
                stmt.setDouble(3, gpa);
                stmt.executeUpdate();
            }
        }

        JOptionPane.showMessageDialog(this, "GPA saved successfully!");

        // Reset form safely
        model.setRowCount(0);
        
        if (jComboBox1.getItemCount() > 0) jComboBox1.setSelectedIndex(0);
        if (jComboBox2.getItemCount() > 0) jComboBox2.setSelectedIndex(0);
        if (jComboBox3.getItemCount() > 0) jComboBox3.setSelectedIndex(0);
        
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(true);
        jTextField1.setText("0.0");
        jTextField3.setText("0.0");
        jTextField1.setEnabled(false);
        jTextField3.setEnabled(false);
        jLabel7.setText("--- Your Gpa ---");
        jLabel8.setText("--- % ---");

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error saving GPA: " + e.getMessage());
    }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
      jComboBox2.removeAllItems();
       loadGradesFromDatabase();
    String studentName = (String) jComboBox1.getSelectedItem();

    if (studentName == null || studentName.equals("--- Choose Student ---")) {
        return;
    }

    try (Connection conn = DBConnection.connect()) {
        // Get student ID by name
        String getIdQuery = "SELECT id FROM users WHERE username = ?";
        PreparedStatement idStmt = conn.prepareStatement(getIdQuery);
        idStmt.setString(1, studentName);
        ResultSet idRs = idStmt.executeQuery();

        if (idRs.next()) {
            int studentId = idRs.getInt("id");

            // Now fetch the registered courses
            String sql = "SELECT c.name FROM registrations r " +
                         "JOIN courses c ON r.course_id = c.id " +
                         "WHERE r.student_id = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, studentId);
            ResultSet rs = stmt.executeQuery();

            jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"--- Choose Subject ---"}));
            while (rs.next()) {
                jComboBox2.addItem(rs.getString("name"));
            }
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Failed to load courses: " + e.getMessage());
    }

    // Reset the table
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        ImageIcon image = new ImageIcon("src/login/icon/logo3.png");
        mainFrameInstructor mainFrameAdmin = new mainFrameInstructor();
        mainFrameAdmin.setVisible(true);
        mainFrameAdmin.pack();
        mainFrameAdmin.setLocationRelativeTo(null);
        mainFrameAdmin.setIconImage(image.getImage());
        this.dispose();
    }//GEN-LAST:event_jButton7ActionPerformed
    private String Hours(String s) {
    if (s.equals("Math 1") || s.equals("Math 2") || s.equals("Elect. Systems and Digital Electronics") ||
        s.equals("Electromagnetic Fields and Wave Propagation") || s.equals("Communication Technologies") ||
        s.equals("Control System Design")) {
        return "4"; 
    } else if (s.equals("Graduation Project II") || s.equals("Graduation Project I") || s.equals("Humanities") ||
               s.equals("Human Rights") || s.equals("Environmental Studies") || s.equals("Technical Writing") ||
               s.equals("Project Management") || s.equals("Communications Skills")) {
        return "2"; 
    } else { 
        return "3"; 
    }
}

  private void loadStudentsAndCoursesFromDatabase() {
    try (Connection conn = DBConnection.connect()) {
        // Load students
        String studentQuery = "SELECT username FROM users WHERE role = 'student'";
        try (PreparedStatement stmt = conn.prepareStatement(studentQuery);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                jComboBox1.addItem(rs.getString("username")); // ✅ Student names go here
            }
        }

        // Load courses
        String courseQuery = "SELECT name FROM courses";
        try (PreparedStatement stmt = conn.prepareStatement(courseQuery);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                jComboBox2.addItem(rs.getString("name")); // ✅ Courses go here
            }
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
    }
}

  private void assignGradeToDatabase() {
    String studentUsername = (String) jComboBox2.getSelectedItem();
    String courseName = (String) jComboBox1.getSelectedItem();
    String gradeText = jTextField1.getText();

    if (studentUsername == null || courseName == null || gradeText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill all fields.");
        return;
    }

    try {
        double gpa = Double.parseDouble(gradeText);
        try (Connection conn = DBConnection.connect()) {
            // Get student_id and course_id
            int studentId = -1, courseId = -1;

            PreparedStatement getStudentId = conn.prepareStatement("SELECT id FROM users WHERE username = ?");
            getStudentId.setString(1, studentUsername);
            ResultSet rs1 = getStudentId.executeQuery();
            if (rs1.next()) studentId = rs1.getInt("id");

            PreparedStatement getCourseId = conn.prepareStatement("SELECT id FROM courses WHERE name = ?");
            getCourseId.setString(1, courseName);
            ResultSet rs2 = getCourseId.executeQuery();
            if (rs2.next()) courseId = rs2.getInt("id");

            if (studentId == -1 || courseId == -1) {
                JOptionPane.showMessageDialog(this, "Invalid student or course.");
                return;
            }

            // Insert or update the grade
            String sql = "INSERT INTO grades (student_id, course_id, gpa) VALUES (?, ?, ?) " +
                         "ON CONFLICT (student_id, course_id) DO UPDATE SET gpa = EXCLUDED.gpa";

            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, studentId);
            stmt.setInt(2, courseId);
            stmt.setDouble(3, gpa);
            stmt.executeUpdate();

            JOptionPane.showMessageDialog(this, "Grade assigned successfully.");

        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid GPA.");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error assigning grade: " + e.getMessage());
    }
}

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

 

 private void loadGradesFromDatabase() {
    String selectedStudent = (String) jComboBox1.getSelectedItem();

    // Do not proceed if student is not selected
    if (selectedStudent == null || selectedStudent.equals("--- Choose Student ---")) {
        return;
    }

    int studentId = -1;
    String getUserIdQuery = "SELECT id FROM users WHERE username = ?";

    try (Connection conn = DBConnection.connect();
         PreparedStatement userStmt = conn.prepareStatement(getUserIdQuery)) {

        userStmt.setString(1, selectedStudent);
        ResultSet rsUser = userStmt.executeQuery();

        if (rsUser.next()) {
            studentId = rsUser.getInt("id");
        } else {
            // Optional: Log instead of showing dialog here
            System.err.println("Student not found: " + selectedStudent);
            return;
        }

        // Fetch registered courses
        String getCoursesQuery =
            "SELECT c.id, c.name FROM registrations r " +
            "JOIN courses c ON r.course_id = c.id " +
            "WHERE r.student_id = ?";

        PreparedStatement courseStmt = conn.prepareStatement(getCoursesQuery);
        courseStmt.setInt(1, studentId);
        ResultSet rsCourses = courseStmt.executeQuery();

        jComboBox2.removeAllItems();
        jComboBox2.addItem("--- Choose Subject ---");

        while (rsCourses.next()) {
            jComboBox2.addItem(rsCourses.getString("name"));
        }

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading data: " + ex.getMessage());
    }
}}
